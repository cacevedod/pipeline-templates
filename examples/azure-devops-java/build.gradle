plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    doLast {
        println "Pruebas ejecutadas: ${getTestCount()}"
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "cacevedod"
        property "sonar.projectKey", "azure-devops-java"
        property "sonar.projectName", "Azure DevOps Java Example"
        
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"

        property "sonar.login", System.getenv("SONAR_TOKEN")
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
    doLast {
        def reportFile = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        if (reportFile.exists()) {
            def parser = new XmlParser().parse(reportFile)
            def counter = parser.counter.find { it.@type == 'INSTRUCTION' }
            if (counter) {
                def missed = counter.@missed.toInteger()
                def covered = counter.@covered.toInteger()
                def total = missed + covered
                def coverage = total > 0 ? (covered / total * 100).round(2) : 0.0
                println "Cobertura de código: ${coverage}%"
            } else {
                println "No se encontró información de cobertura."
            }
        } else {
            println "Reporte de cobertura no encontrado. Ejecute jacocoTestReport para generar el reporte."
        }
    }
}